// √Årvores

| Caracter√≠stica             | ABP (BST)                       | AVL                           |
| -------------------------- | ------------------------------- | ----------------------------- |
| Estrutura                  | √Årvore bin√°ria de busca simples | √Årvore bin√°ria **balanceada** |
| Balanceamento              | N√£o autom√°tico                  | Autom√°tico ap√≥s cada opera√ß√£o |
| Complexidade (pior caso)   | O(n)                            | O(log n)                      |
| Rota√ß√µes                   | N√£o tem                         | Sim (para balancear)          |
| Mais f√°cil de implementar  | ‚úÖ Sim                           | ‚ùå Mais dif√≠cil                |
| Mais eficiente para buscas | ‚ùå N√£o                           | ‚úÖ Sim                         |

// Serve para organizar dados de forma hier√°rquica, onde cada elemento √© um n√≥ e pode ter filhos.
- As arvores s√£o muito usadas em estruturas de dados, como sistemas de arquivos, bancos de dados e algoritmos de busca.
- Sevindo proicipalmente para armazenar dados de forma que seja f√°cil de navegar e manipular.
- Inserindo, removendo e buscando elementos de forma eficiente.
- N√£o s√£o lineares, ou seja, n√£o seguem uma sequ√™ncia linear como listas ou arrays.
- N√≥ pai: √© o n√≥ que est√° acima de outro n√≥.
- N√≥ filho: √© o n√≥ que est√° abaixo de outro n√≥.
- N√≥ raiz: √© o n√≥ que n√£o tem pai, ou seja, √© o topo da √°rvore.
- Folha: √© um n√≥ que n√£o tem filhos, ou seja, √© o final de um ramo da √°rvore.
// - Sub √°rvore: √© uma parte da √°rvore que cont√©m um n√≥ e todos os seus descendentes.

//  A diferen√ßa para arvore bin√°ria √© que cada n√≥ pode ter mais de dois filhos,
 enquanto na √°rvore bin√°ria cada n√≥ tem no m√°ximo dois filhos (esquerdo e direito).

// Arvores binarias de busca (BST - Binary Search Tree):
- onde todos os n√≥s √† esquerda de um n√≥ s√£o menores que ele e todos os n√≥s √† direita s√£o maiores.
- esquerda menor que o n√≥ pai e direita maior que o n√≥ pai.

Inser√ß√£o: percorre a √°rvore at√© encontrar a posi√ß√£o correta.

Busca: come√ßa na raiz e segue √† esquerda ou direita dependendo do valor.

* Remo√ß√£o: tr√™s casos:

N√≥ sem filhos ‚Üí remove direto.

N√≥ com 1 filho ‚Üí liga o filho ao pai do n√≥ removido.

N√≥ com 2 filhos ‚Üí substitui pelo sucessor (menor da sub√°rvore direita) ou antecessor (maior da sub√°rvore esquerda).

       8
     /   \
    3     10
   / \      \
  1   6      14
     / \
    4   7

20, 15, 25, 10, 18, 22, 3

     20
    /   \
    15    25
    / \    /
    10  18  22
    /
    3

- Arvores AVL: s√£o √°rvores bin√°rias de busca balanceadas,
onde a diferen√ßa de altura entre as sub √°rvores esquerda e direita de qualquer n√≥ √© no m√°ximo 1.

- arvore binaria de busca balanceada, onde a diferen√ßa de altura entre as sub√°rvores
esquerda e direita de qualquer n√≥ √© no m√°ximo 1.

- Cada n√≥ tem um fator de balanceamento = altura da sub√°rvore esquerda ‚àí altura da sub√°rvore direita.

- quando ela fica desbalanceada, ela √© rotacionada para manter o balanceamento.

LL (Simples √† direita): Inser√ß√£o √† esquerda do filho esquerdo.

RR (Simples √† esquerda): Inser√ß√£o √† direita do filho direito.

LR (Dupla √† direita): Inser√ß√£o √† direita do filho esquerdo.

RL (Dupla √† esquerda): Inser√ß√£o √† esquerda do filho direit

// Complexidade AVL
   Altura sempre O(log n)

   Opera√ß√µes de busca, inser√ß√£o, remo√ß√£o: O(log n)

// Arvores Red-Black:
- s√£o √°rvores bin√°rias de busca balanceadas, onde cada n√≥ tem uma cor (vermelho ou preto).
- As regras s√£o:
  1. A raiz √© preta.
  2. Folhas (Nulos) s√£o pretas.
  3. Se um n√≥ √© vermelho, seus filhos devem ser pretos.
  4. Todo caminho da raiz at√© as folhas tem o mesmo n√∫mero de n√≥s pretos.
  5. Oum n√≥ √© vermelho ou preto, mas n√£o ambos.

- tem altura O(log n) e opera√ß√µes de busca, inser√ß√£o e remo√ß√£o tamb√©m s√£o O(log n).

‚ö†Ô∏è Problema:
Se os dados forem inseridos em ordem (tipo 1, 2, 3, 4...), a √°rvore vira isso:

1
 \
  2
   \
    3
     \
      4
üëâ Isso vira uma lista ligada, e perde efici√™ncia. Por isso existem √°rvores balanceadas como AVL e Rubro-Negra.

Anterior:
                   [P]
             /               \
      [C, K]                  [S, W]
    /       |         \         /      |     \
[A,B]   [D,E,F,H]  [L,N,Q,R] [T,V]  [X,Y]   [Z]

Nova:
               [P]
        /               \
    [C, K]               [S, W]
  /    |    \          /     |     \
[A,B,D,E] [F,H]  [L,N]  [Q,R] [T,V] [X,Y,Z]



