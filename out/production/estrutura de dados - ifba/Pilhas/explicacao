### 1. **Gerar documentação usando Javadoc:**

```sh
javadoc -d doc src/*.java
```

* **Objetivo:** O comando `javadoc` gera documentação em HTML a partir dos comentários especiais que você escreve no seu código. Isso é útil para gerar automaticamente uma documentação legível para outras pessoas que usarão ou entenderão seu código.
* **Explicação:**

  * `-d doc`: Especifica o diretório onde os arquivos HTML da documentação serão gerados. O diretório `doc` será criado.
  * `src/*.java`: Refere-se a todos os arquivos `.java` dentro da pasta `src`. O Javadoc processará esses arquivos e criará os arquivos HTML com base nas descrições feitas no código.

### 2. **Compilar o código-fonte:**

#### Compilar um código-fonte específico:

```sh
javac src/Empilhavel.java -d bin
```

* **Objetivo:** O comando `javac` compila um arquivo `.java` em um bytecode `.class` que pode ser executado pela JVM (Java Virtual Machine).
* **Explicação:**

  * `src/Empilhavel.java`: Caminho para o arquivo Java a ser compilado.
  * `-d bin`: Indica onde os arquivos compilados (arquivos `.class`) devem ser armazenados, no caso, na pasta `bin`.

#### Compilar todos os códigos-fonte:

```sh
javac src/*.java -d bin
```

* **Objetivo:** Compilar todos os arquivos `.java` da pasta `src`.
* **Explicação:** Esse comando irá compilar todos os arquivos Java dentro da pasta `src` e gerar os arquivos `.class` na pasta `bin`.

### 3. **Executar o programa:**

```sh
java -cp .;bin PilhaDinamicaGenericaMainCLI
```

* **Objetivo:** O comando `java` executa o bytecode compilado (arquivos `.class`).
* **Explicação:**

  * `-cp .;bin`: Define o classpath, ou seja, os diretórios onde o Java procurará os arquivos `.class`. O ponto `.` refere-se ao diretório atual, e `bin` é a pasta onde os arquivos compilados estão.
  * `PilhaDinamicaGenericaMainCLI`: Classe principal que contém o método `main` a ser executado.

### 4. **Testes unitários com JUnit:**

#### Compilar a classe de teste:

```sh
javac -cp .;bin;lib/junit-4.13.2.jar -d test test/PilhaDinamicaGenericaTest.java
```

* **Objetivo:** Compilar a classe de teste que usa o JUnit, um framework para testes automatizados em Java.
* **Explicação:**

  * `-cp .;bin;lib/junit-4.13.2.jar`: Define os diretórios e a biblioteca JUnit como parte do classpath.
  * `-d test`: Indica onde os arquivos compilados da classe de teste serão armazenados (na pasta `test`).
  * `test/PilhaDinamicaGenericaTest.java`: Caminho para o arquivo da classe de teste.

#### Executar os testes:

```sh
java -cp .;bin;test;lib/junit-4.13.2.jar;lib/hamcrest-core-1.3.jar org.junit.runner.JUnitCore PilhaDinamicaGenericaTest
```

* **Objetivo:** Executar os testes unitários com JUnit.
* **Explicação:**

  * `-cp .;bin;test;lib/junit-4.13.2.jar;lib/hamcrest-core-1.3.jar`: Define o classpath, incluindo os diretórios `bin`, `test` e as bibliotecas JUnit e Hamcrest.
  * `org.junit.runner.JUnitCore`: Comando que executa os testes com JUnit.
  * `PilhaDinamicaGenericaTest`: Nome da classe de testes a ser executada.

### 5. **Gerar um arquivo JAR (Java ARchive):**

```sh
jar cvfe build/Main.jar PilhaDinamicaGenericaMainCLI -C bin .
```

* **Objetivo:** Gerar um arquivo `.jar`, que é um arquivo compactado contendo classes e recursos necessários para executar o programa.
* **Explicação:**

  * `c`: Cria um novo arquivo JAR.
  * `v`: Exibe informações sobre o processo de criação.
  * `f`: Indica o nome do arquivo JAR a ser criado.
  * `e`: Especifica a classe principal que contém o método `main` (neste caso, `PilhaDinamicaGenericaMainCLI`).
  * `-C bin .`: Adiciona todos os arquivos `.class` da pasta `bin` ao JAR.

### 6. **Executar o arquivo JAR:**

```sh
java -jar build/Main.jar
```

* **Objetivo:** Executar o programa a partir de um arquivo `.jar`.
* **Explicação:** O comando `java -jar` executa o arquivo JAR gerado. Ele irá procurar a classe principal dentro do arquivo JAR e executá-la.

### 7. **Observação sobre o classpath em sistemas Linux e Windows:**

* **Windows:** No comando `-cp`, você usa ponto e vírgula `;` para separar os diretórios e arquivos JAR.
* **Linux/Unix:** Nos sistemas Linux ou Unix, você usa dois pontos `:` para separar os diretórios e arquivos JAR.

---

### Exemplo prático de como executar os passos:

1. **Gerar documentação (Javadoc):**

   * Execute `javadoc -d doc src/*.java` no terminal para gerar a documentação do código fonte.

2. **Compilar o código-fonte:**

   * Execute `javac src/*.java -d bin` para compilar os arquivos `.java`.

3. **Executar o programa:**

   * Execute `java -cp .;bin PilhaDinamicaGenericaMainCLI` para rodar a classe principal.

4. **Rodar testes unitários com JUnit:**

   * Compile os testes: `javac -cp .;bin;lib/junit-4.13.2.jar -d test test/PilhaDinamicaGenericaTest.java`
   * Execute os testes: `java -cp .;bin;test;lib/junit-4.13.2.jar;lib/hamcrest-core-1.3.jar org.junit.runner.JUnitCore PilhaDinamicaGenericaTest`

5. **Gerar o arquivo JAR e executá-lo:**

   * Execute `jar cvfe build/Main.jar PilhaDinamicaGenericaMainCLI -C bin .` para criar o arquivo JAR.
   * Execute `java -jar build/Main.jar` para executar o JAR gerado.

Esses passos são essenciais para compilar, testar, documentar e gerar executáveis para o seu projeto Java.
