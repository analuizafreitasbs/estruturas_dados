### ğŸ§ª O que Ã© JUnit?

**JUnit** Ã© uma **ferramenta (framework) de testes unitÃ¡rios** para aplicaÃ§Ãµes Java.

> **Testes unitÃ¡rios** sÃ£o pequenos testes automÃ¡ticos que verificam se partes especÃ­ficas do seu cÃ³digo (geralmente mÃ©todos) estÃ£o funcionando corretamente.

---

### âœ… Para que serve o JUnit?

JUnit permite que vocÃª:

* Teste **automaticamente** se uma classe/mÃ©todo estÃ¡ retornando o que deveria.
* Detecte **erros mais cedo**, durante o desenvolvimento.
* Garanta que alteraÃ§Ãµes no cÃ³digo **nÃ£o quebrem** funcionalidades antigas (isso se chama *teste de regressÃ£o*).
* Melhore a **qualidade e confiabilidade** do cÃ³digo.

---

### ğŸ§± Como funciona?

VocÃª escreve **mÃ©todos de teste** com a anotaÃ§Ã£o `@Test`, e dentro deles vocÃª usa **mÃ©todos de verificaÃ§Ã£o** (chamados de *asserts*) como:

* `assertEquals()`: compara se dois valores sÃ£o iguais.
* `assertTrue()`: verifica se uma condiÃ§Ã£o Ã© verdadeira.
* `assertThrows()`: garante que uma exceÃ§Ã£o Ã© lanÃ§ada.

Exemplo simples:

```java
import org.junit.Test;
import static org.junit.Assert.*;

public class CalculadoraTest {

    @Test
    public void testSoma() {
        Calculadora calc = new Calculadora();
        int resultado = calc.somar(2, 3);
        assertEquals(5, resultado);
    }
}
```

Esse teste verifica se o mÃ©todo `somar(2, 3)` da classe `Calculadora` realmente retorna 5.

---

### ğŸ”§ Como usar?

VocÃª pode usar o JUnit:

* Em projetos Java com IDEs como **Eclipse**, **IntelliJ** ou **NetBeans**.
* Com ferramentas de build como **Maven** ou **Gradle** (elas adicionam o JUnit como dependÃªncia).
* Em projetos Java normais com `junit.jar` incluÃ­do no classpath.

